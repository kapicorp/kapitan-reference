GCLOUD_COMMAND=${SCRIPT_RELATIVE_DIR}/gcloud

function get_project_number() {
  PROJECT_NUMBER=${1:-${TARGET_NAME}}
  ${GCLOUD_COMMAND} projects list --filter="${PROJECT_NUMBER}" --format='value[terminator=""](PROJECT_NUMBER)' 2>/dev/null
}

function get_all_projects() {
  PROJECT_FILTER=${1:-"kapicorp-*"}
  ${GCLOUD_COMMAND} projects list --format='value[terminator=" "](project_id)' --filter="project_id:${PROJECT_FILTER}" 2>/dev/null
}

function get_clusters_for_project() {
  GCP_PROJECT_ID=${1:-${GCP_PROJECT_ID}}
  ${GCLOUD_COMMAND} --format='value[terminator=" ",separator=":"](name, zone)' container clusters list --project="${GCP_PROJECT_ID}" 2>/dev/null
}

function get_cluster_config() {
  ${GCLOUD_COMMAND} --format=yaml container clusters describe "$@"  2>/dev/null
}

# if running in a tty
TTY_FLAG=""

if [ -t 0 ]; then TTY_FLAG="-t"; fi

GCLOUD_IMAGE="google/cloud-sdk:latest"
GCLOUD_DOCKER_ROOT=/src
GCLOUD_CONTAINER="docker \
  run --rm -i -u $UID \
  ${TTY_FLAG} \
  --network host \
  -w ${GCLOUD_DOCKER_ROOT} \
  -v ${KAPITAN_ABSOLUTE_BASEDIR}:${GCLOUD_DOCKER_ROOT}:delegated \
  -v $HOME/.config/gcloud:/.config/gcloud:delegated \
  -v $HOME/.kube:/.kube:delegated \
  -v $HOME/.docker:/.docker:delegated \
  ${GCLOUD_IMAGE}"

GCLOUD_BINARY="${GCLOUD_CONTAINER} gcloud"
KUBECTL_BINARY="${GCLOUD_CONTAINER} kubectl"
