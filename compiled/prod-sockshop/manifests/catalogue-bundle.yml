apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    manifests.kapicorp.com/generated: 'true'
  labels:
    app.kapicorp.dev/component: catalogue
    app.kubernetes.io/part-of: sock-shop
    name: catalogue
  name: catalogue
  namespace: prod-sockshop
spec:
  minReadySeconds:
  progressDeadlineSeconds:
  replicas: 1
  revisionHistoryLimit:
  selector:
    matchLabels:
      app.kubernetes.io/part-of: sock-shop
      name: catalogue
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/part-of: sock-shop
        name: catalogue
    spec:
      affinity: {}
      containers:
        - args:
            - -port=80
          command:
            - /app
          image: weaveworksdemos/catalogue:0.3.5
          imagePullPolicy: IfNotPresent
          lifecycle: {}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: catalogue
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - all
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
      dnsPolicy:
      hostNetwork:
      hostPID:
      imagePullSecrets: []
      initContainers: []
      nodeSelector: {}
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
